package com.epam.esm.module2boot.service.impl;

import com.epam.esm.module2boot.dao.OrderDAO;
import com.epam.esm.module2boot.dto.OrderDTO;
import com.epam.esm.module2boot.dto.UserOrdersDTO;
import com.epam.esm.module2boot.exception.BadRequestException;
import com.epam.esm.module2boot.exception.NotFoundException;
import com.epam.esm.module2boot.model.Order;
import com.epam.esm.module2boot.model.Tag;
import com.epam.esm.module2boot.service.GiftCertificateService;
import com.epam.esm.module2boot.service.OrderService;
import com.epam.esm.module2boot.service.TagService;
import com.epam.esm.module2boot.service.UserService;
import lombok.AllArgsConstructor;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;

@Service
@AllArgsConstructor
public class OrderServiceImpl implements OrderService {

    private final ModelMapper modelMapper;
    private final OrderDAO orderDao;
    private final UserService userService;
    private final GiftCertificateService giftCertificateService;
    private final TagService tagService;

    @Override
    public OrderDTO createOrder(OrderDTO orderDTO) throws BadRequestException {
        Order order = Order.builder()
                .id(-1) // id will be generated by DB
                .user(userService.getUser(orderDTO.getUserId()))
                .giftCertificate(giftCertificateService.getGiftCertificateById(orderDTO.getGiftCertificateId()))
                .cost(orderDTO.getCost())
                .build();
        Order outOrder = orderDao.createOrder(order);
        return modelMapper.map(outOrder, OrderDTO.class);
    }

    @Override
    public Page<UserOrdersDTO> getOrderListByUserId(int id, int pageNum, int pageSize) throws NotFoundException {
        userService.getUser(id); // check if user exists
        Page<Order> orderPage = orderDao.getOrderListByUserId(id, pageNum, pageSize);
        return orderPage.map(order -> modelMapper.map(order, UserOrdersDTO.class));

    }

    @Override
    public Order getOrder(Integer id) {
        return orderDao.getOrder(id);
    }

    @Override
    public Tag getMostWidelyUsedTag() {
        int userID = orderDao.getUserIDWithHighestCostOfAllOrders();
        return tagService.getMostUsedTagForUserID(userID);
    }
}
